apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: "io.spring.dependency-management"

ext {
    name = 'nrk-project-name'
    description = 'Anarchia Âµ-service template' 
    version= System.env.GO_PIPELINE_LABEL ?: "devbuild"
    sourceEncoding='UTF-8'
    dockerRegistry = "anarchia-registry:5000"
}

jar {
    baseName = project.ext.name
    //version =  project.ext.version
    
    //null jar version to help current GO 
    //artifact limitation
    version =  ''
}

buildscript {
    ext {
        springBootVersion = '1.3.0.RELEASE'
        groovyVersion = '2.4.3'
    }
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/libs-snapshot-local" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath "io.spring.gradle:dependency-management-plugin:0.4.0.RELEASE"
    }
}


dependencyManagement {
    imports { 
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Brixton.BUILD-SNAPSHOT" 
    }
}

dependencies {
    compile 'org.springframework.cloud:spring-cloud-starter-eureka'
    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    
    compile('org.springframework.cloud:spring-cloud-starter-bus-amqp')
    compile("org.springframework.cloud:spring-cloud-starter-hystrix")
    compile("org.springframework.cloud:spring-cloud-netflix-hystrix-stream")

    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile "org.codehaus.groovy:groovy-templates:${groovyVersion}"

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "junit:junit"
}

docker {
}

task buildImage(type: Docker) {
    println "Configuring  buildImage"
    dockerfile "src/main/docker/Dockerfile"
    
    applicationName = project.ext.name
    tagVersion = project.ext.version
    //tag = "${project.group}/${applicationName}:${tagVersion}"
}

buildImage.doFirst {
   project.copy {
    from jar.archivePath
    into buildImage.stageDir
   } 
}

buildImage.doLast {
    exec {
       executable "docker"
       args "tag","-f", "${applicationName}:${tagVersion}", "${project.dockerRegistry}/${applicationName}:${tagVersion}"
     }

    exec {
       executable "docker"
       args "push","${project.dockerRegistry}/${applicationName}:${tagVersion}"
     }
}

repositories {
    jcenter()
    maven { url 'http://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/release/' }
    maven { url "http://repo.spring.io/libs-snapshot-local" }
    maven { url "http://repo.spring.io/libs-milestone-local" }
    maven { url "http://repo.spring.io/libs-release-local" }
    mavenCentral()
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}